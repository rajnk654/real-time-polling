// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  polls        Poll[]   // 1:M - one user, many polls created
  votes        Vote[]   // 1:M - one user, many votes made
}
model Poll {
  id        Int          @id @default(autoincrement())
  question  String
  isPublished Boolean
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  creator   User         @relation(fields: [creatorId], references: [id])
  creatorId Int
  options   PollOption[] // 1:M - Poll has many options
}
model PollOption {
  id      Int      @id @default(autoincrement())
  text    String
  poll    Poll     @relation(fields: [pollId], references: [id])
  pollId  Int
  votes   Vote[]   // 1:M - Option can have many votes
}
model Vote {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  option      PollOption  @relation(fields: [optionId], references: [id])
  optionId    Int
  createdAt   DateTime    @default(now())
  @@unique([userId, optionId]) // Prevent duplicate votes on same option per user
}

